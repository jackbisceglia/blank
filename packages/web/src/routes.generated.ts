/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as AuthLayoutImport } from './pages/_auth/layout'
import { Route as AuthIndexImport } from './pages/_auth/index'
import { Route as StaticLandingImport } from './pages/_static/landing'

// Create/Update Routes

const AuthLayoutRoute = AuthLayoutImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const StaticLandingRoute = StaticLandingImport.update({
  id: '/_static/landing',
  path: '/landing',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_static/landing': {
      id: '/_static/landing'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof StaticLandingImport
      parentRoute: typeof rootRoute
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthLayoutImport
    }
  }
}

// Create and export the route tree

interface AuthLayoutRouteChildren {
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthIndexRoute: AuthIndexRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthLayoutRouteWithChildren
  '/landing': typeof StaticLandingRoute
  '/': typeof AuthIndexRoute
}

export interface FileRoutesByTo {
  '/landing': typeof StaticLandingRoute
  '/': typeof AuthIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthLayoutRouteWithChildren
  '/_static/landing': typeof StaticLandingRoute
  '/_auth/': typeof AuthIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/landing' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/landing' | '/'
  id: '__root__' | '/_auth' | '/_static/landing' | '/_auth/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
  StaticLandingRoute: typeof StaticLandingRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
  StaticLandingRoute: StaticLandingRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_static/landing"
      ]
    },
    "/_auth": {
      "filePath": "_auth/layout.tsx",
      "children": [
        "/_auth/"
      ]
    },
    "/_static/landing": {
      "filePath": "_static/landing.tsx"
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
