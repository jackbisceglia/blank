[[FEATURES]]

--SYNC--
    [ ] zero init/scaffolding
        [ ] setup schema in zero package
        [ ] get infra working with schema
        [ ] init zero instance in react after authentication
        [ ] zero instance working with auth jwt/jwks from openauth
    
--UI--
    [ ] modal/drawer/route for mutations?
        [ ] tie url state to open state for relevant ui
    [ ] dashboard
        [ ] what to show here other than username
    [ ] account page
        [ ] update name
        [ ] delete account
    [ ] preferred group
        [ ] ui indicator shown everywhere that preferred group is rendered
        [ ] easy way to change this

--KEYBOARD SHORTCUTS--
    [ ]

--NATIVE LLMs--
    [ ] 

--INFRA--
    [ ] autodeploy from push (setup via sst)
    [ ] spot instances to lower cost for now
    [ ] migrate from neon ? 
        + some issues recently
        + not in same aws region
        + still stuck on postgres via zero

[[OPEN BUGS]]

--ERROR HANDLING--
[SOLVED]
    [x] i have a weird mix of neverthrow and regular error handling because wrapping everything is *really* annoying
        + this is lower priority than others
        [solution]
        -> this is not too bad now. the solution is:
            -> user neverthrow WHEREVER possible
            -> at network boundaries, if possible, use serializable neverthrow solution
            -> at framework/library boundaries (eg. hooking into tanstack start), unwrap and throw when necessary

    [ ] neverthrow utils in /web that might need to be shared

--AUTHENTICATION--
    [SOLVED]
    [x] i hit the server on *every* request
        + this is a natural limitation of `beforeLoad` in tanstack
        options
            -> just forget about loaders/beforeLoad and do this in a useEffect (can cache with reactQuery). this would make me do:
                -> useEffect auth&zero
                -> react query for auth status
        [solution]
        -> this is in an *ok* state
            -> i've simply moved the fetch of auth state into a use effect. this will work for now
                -> there's no request aborting and unmount logic which is a potential problem
                -> this can be moved into a layout loader likely and then just logic handled in an effect